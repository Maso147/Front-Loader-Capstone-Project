#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from std_msgs.msg import Float32
import sys
import termios
import tty
import select
import threading

msg = """
Front Loader Teleop Control
---------------------------
Moving around:
   w
a  s  d

w/s : forward/backward movement
a/d : turning left/right

Arm control:
   i    : arm up
   k    : arm down

Bucket control:
   o    : dump bucket
   l    : scoop bucket

Pump control:
   p    : increase pump power
   ;    : decrease pump power

CTRL-C to quit
"""

class FrontLoaderTeleop(Node):
    """
    Keyboard teleoperation for the hydraulic front loader.
    """
    
    def __init__(self):
        super().__init__('front_loader_teleop')
        
        # Publishers
        self.vel_pub = self.create_publisher(Twist, 'cmd_vel', 10)
        self.arm_pub = self.create_publisher(Float32, 'arm_control', 10)
        self.bucket_pub = self.create_publisher(Float32, 'bucket_control', 10)
        self.pump_pub = self.create_publisher(Float32, 'pump_control', 10)
        
        # Initial values
        self.linear_speed = 0.0  # Range: -1.0 to 1.0
        self.angular_speed = 0.0  # Range: -1.0 to 1.0
        self.arm_position = 0.5   # Range: 0.0 to 1.0
        self.bucket_position = 0.5  # Range: 0.0 to 1.0
        self.pump_power = 0.0     # Range: 0.0 to 1.0
        
        # Control increments
        self.speed_increment = 0.1
        self.arm_increment = 0.1
        self.bucket_increment = 0.1
        self.pump_increment = 0.1
        
        # Start keyboard listener in a separate thread
        self.key_thread = threading.Thread(target=self.get_key)
        self.key_thread.daemon = True
        self.key_thread.start()
        
        # Timer for regular updates
        self.timer = self.create_timer(0.1, self.publish_commands)
        
        self.get_logger().info(msg)
    
    def get_key(self):
        """Continuously read and process key presses."""
        old_attr = termios.tcgetattr(sys.stdin)
        try:
            tty.setcbreak(sys.stdin.fileno())
            while rclpy.ok():
                if select.select([sys.stdin], [], [], 0)[0]:
                    key = sys.stdin.read(1)
                    self.process_key(key)
        finally:
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_attr)
    
    def process_key(self, key):
        """Process a key press and update control values."""
        if key == 'w':
            self.linear_speed = min(1.0, self.linear_speed + self.speed_increment)
        elif key == 's':
            self.linear_speed = max(-1.0, self.linear_speed - self.speed_increment)
        elif key == 'a':
            self.angular_speed = min(1.0, self.angular_speed + self.speed_increment)
        elif key == 'd':
            self.angular_speed = max(-1.0, self.angular_speed - self.speed_increment)
        elif key == 'i':  # Arm up
            self.arm_position = min(1.0, self.arm_position + self.arm_increment)
        elif key == 'k':  # Arm down
            self.arm_position = max(0.0, self.arm_position - self.arm_increment)
        elif key == 'o':  # Dump bucket
            self.bucket_position = max(0.0, self.bucket_position - self.bucket_increment)
        elif key == 'l':  # Scoop bucket
            self.bucket_position = min(1.0, self.bucket_position + self.bucket_increment)
        elif key == 'p':  # Increase pump power
            self.pump_power = min(1.0, self.pump_power + self.pump_increment)
        elif key == ';':  # Decrease pump power
            self.pump_power = max(0.0, self.pump_power - self.pump_increment)
        elif key == ' ':  # Stop movement
            self.linear_speed = 0.0
            self.angular_speed = 0.0
        elif key == '\x03':  # CTRL-C
            raise KeyboardInterrupt
    
    def publish_commands(self):
        """Publish current control values to the appropriate topics."""
        # Publish movement commands
        twist = Twist()
        twist.linear.x = self.linear_speed
        twist.angular.z = self.angular_speed
        self.vel_pub.publish(twist)
        
        # Publish arm position
        arm_msg = Float32()
        arm_msg.data = self.arm_position
        self.arm_pub.publish(arm_msg)
        
        # Publish bucket position
        bucket_msg = Float32()
        bucket_msg.data = self.bucket_position
        self.bucket_pub.publish(bucket_msg)
        
        # Publish pump power
        pump_msg = Float32()
        pump_msg.data = self.pump_power
        self.pump_pub.publish(pump_msg)

def main(args=None):
    rclpy.init(args=args)
    teleop = FrontLoaderTeleop()
    
    try:
        rclpy.spin(teleop)
    except KeyboardInterrupt:
        teleop.get_logger().info("Keyboard interrupt, shutting down")
    finally:
        # Publish zero values before shutting down
        teleop.linear_speed = 0.0
        teleop.angular_speed = 0.0
        teleop.pump_power = 0.0
        teleop.publish_commands()
        
        teleop.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()